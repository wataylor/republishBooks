/* @name SelectorUSPhoneNumber.java

    Copyright (c) 2007 by Advanced Systems and Software Technologies.
    All Rights Reserved

    Under revision by: $Locker:  $
    Change Log:
    $Log: SelectorUSPhoneNumber.java,v $
    Revision 1.1  2007/06/15 18:17:09  asst
    upload

*/

package asst.dbase;

import javax.servlet.http.HttpServletRequest;

import asst.dbase.SelectorFieldPreload;

/**
 * Generate 3 input text fields into which to type Maerican-style
 * telephone numbers.

 * @author WEB Development
 * @version %I%, %G%
 * @since
 *
 * @see <classname>
 */

public class SelectorUSPhoneNumber  extends SelectorFieldPreload {

  /** Definition of the up and down arrows for each line of a group of
   * phone numbers.  These arrows call a JavaScript function which
   * moves the selected phone number.*/
  public static final String UDRO = "<input type=\"image\" onClick='javascript:phUp(\"__\")' src=\"images/UpArrow.png\"><input type=\"image\" onClick='javascript:phDn(\"__\")' src=\"images/DownArrow.png\">";

  boolean wantJavaScript;

  /** Obligatory constructor.*/
  public SelectorUSPhoneNumber() { super(); }

  /**
   * Constructor that sets the field name, database table name, and
   * database column.

   * @param name The name by which the form field generated by getHTML
   * is identified; this name has NOTHING to do with the database.
   * This name is used when attempting to retrieve the current
   * user-entered value from the form.  This name should not contain
   * spaces if the fields are to be manipulated by JavaScript.  If
   * spaces are simulated by underscores, the method getPrettyName
   * should be used to retrieve a human-readable name from this field.

   * @param table The name of the database table in which the field is
   * stored.  This table is expected to be referenced by a
   * field which is to be passed to TwixtTableAndForm.

   * @param column The name of the database column within the table
   * which stores the field value.  The column is assumed to store
   * character data because SQL TIMESTAMP columns are updated as if
   * they were character constants.  The choice is stored as an SQL
   * time string in JDBC escape format which is yyyy-mm-dd hh:mm:ss
   * This format is enforced by {@link
   * asst.dbase.SelectorFieldPreload#SQL_DATE_STRING}

  */
  public SelectorUSPhoneNumber(String name, String table, String column) {
    super(name, table, column);
  }

  /** Read a set of selectors which set a phone number.
      @param name is the name of the set of selectors, various strings
      are added to the name to read the request.
      @param request the servlet request object from which values are extracted.*/
  public String ReadPhoneNoFields(String nameP, HttpServletRequest request) {
    String answer;
    String ac;
    String ex;
    String no;
    /**/

    ac=request.getParameter(nameP+"_ac");
    ex=request.getParameter(nameP+"_ex");
    no=request.getParameter(nameP+"_no");

    if ((ac == null) || ES.equals(ac) ||
	(ex == null) || ES.equals(ex) ||
	(no == null) || ES.equals(no)) { return null; } // Nothing set in form

    answer = ac + ex + no;

//      System.out.println(name + " " + ac + " " + ex + " " + no + " " +
//                     begins + " " + answer);

    return answer;
  }

  public StringBuffer makePhoneFields(String phoneNo, String nameP) {
    StringBuffer sb = new StringBuffer();
    String ac;
    String ex;
    String no;
    /**/

    try { ac = phoneNo.substring(0, 3); } catch (Exception e) { ac = ES; }
    try { ex = phoneNo.substring(3, 6); } catch (Exception e) { ex = ES; }
    try { no = phoneNo.substring(6);    } catch (Exception e) { no = ES; }

    sb.append("<input name=\"" + nameP + "_ac\" size=\"2\" maxlength=\"3\" value=\"" +
	      ac + "\"");
    if (wantJavaScript) {
      sb.append(" onKeyPress='return filterNums(event,this,3)' onKeyUp='mayGoOn(event,this,3)'");
    }
    sb.append(this.addParam + "> -\n");
    sb.append("<input name=\"" + nameP + "_ex\" size=\"2\" maxlength=\"3\" value=\"" +
	      ex + "\"");
    if (wantJavaScript) {
      sb.append(" onKeyPress='return filterNums(event,this,3)' onKeyUp='mayGoOn(event,this,3)'");
    }
    sb.append(this.addParam + "> -\n");
    sb.append("<input name=\"" + nameP + "_no\" size=\"3\" maxlength=\"4\" value=\"" +
	      no + "\"");
    if (wantJavaScript) {
      sb.append(" onKeyPress='return filterNums(event,this,4)' onKeyUp='mayGoOn(event,this,4)'");
    }
    sb.append(this.addParam + ">\n");
//     if (wantJavaScript) {
//       sb.append(UDRO.replace("__", name));  forces form resubmit somewhy
//     }

    return sb;
  }

  /** Ask the form to record the current form value which has been
      entered for its field.  If the form returns a null value, the
      field was not mentioned in the form so the form has no effect on
      this selector object.  If the field returns a different value,
      however, the dirty bit is set to indicate that the field must be
      written to the database.  There is one exception - if the field
      has a null value and the form returns an empty string, this is
      not regarded as a change.
      @param request from the form wich may have a parameter whose name
      matches the name of this object, in which case the parameter value
      replaces the current choice.*/
  public void setChoice(HttpServletRequest request) {
    String aParam;
    /**/

    aParam = this.fieldNamePrefix + this.name;

    aParam = this.ReadPhoneNoFields(aParam, request);
    this.setDirtyChoice(aParam);
    //System.out.println(this.name + " " + aParam + " " + this.choice);
  }

  public String getChoiceAsText() {
    String phoneNo = getChoice();
    String ac;
    String ex;
    String no;
    /**/

    try { ac = phoneNo.substring(0, 3); } catch (Exception e) { ac = ES; }
    try { ex = phoneNo.substring(3, 6); } catch (Exception e) { ex = ES; }
    try { no = phoneNo.substring(6);    } catch (Exception e) { no = ES; }

    return ac + "-" + ex + "-" + no;
  }

  /** Express the field in .html without labeling it, using a
      specified width. */
  public StringBuffer getHTMLOnly(int width) {
    String cho = ES;
    /**/

    if (readOnly) { return new StringBuffer(getChoiceAsText()); }

    if (this.choice != null) {
      cho = this.choice;
    }
    return this.makePhoneFields(cho, this.fieldNamePrefix + this.name);
  }

  /** Express the field as labeled .html. */
  public StringBuffer getHTML() {
    return this.getHTML(0);
  }

  /** Express the field as labeled .html. */
  public StringBuffer getHTML( int width) {
    StringBuffer sb;
    /**/

    sb = new StringBuffer(this.getPrettyName() + ": ");
    if (readOnly) {
      sb.append(getChoiceAsText()); // Uneditable
    } else {
      sb.append(this.getHTMLOnly(width));
    }
    return sb;
  }

  /** Test to see if this instance generates code to call Java Script
   * functions to make sure that only numbers are entered and that the
   * cursor goes to the next field when a field has enough numbers.*/
  public boolean isWantJavaScript() {
    return wantJavaScript;
  }

  /**
   * Set the variable which determines whether the .html includes
   * event handlers to verify that only numbers are entered into the
   * phone number and to move the cursor to the next field when the
   * right number of numbers have been entered.
   * @param wantJavaScript
   */
  public void setWantJavaScript(boolean wantJavaScript) {
    this.wantJavaScript = wantJavaScript;
  }

}

