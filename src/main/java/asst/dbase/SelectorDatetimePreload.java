/* @name SelectorDatetimePreload.java

    Copyright (c) 2003 by Advanced Systems and Software Technologies.
    All Rights Reserved<br>

    Under revision by: $Locker:  $<br>
    Change Log:<br>
    $Log: SelectorDatetimePreload.java,v $
    Revision 1.6  2006/01/19 16:40:54  asst
    read-only attribute for fields and forms

    Revision 1.5  2004/09/18 22:48:57  asst
    fix default hour min second on date only

    Revision 1.4  2004/01/31 22:41:58  asst
    fix use of anyParam

    Revision 1.3  2004/01/24 01:27:16  asst
    field widths and changes

    Revision 1.2  2003/10/06 20:52:31  asst
    pop-up calendar

    Revision 1.1  2003/02/04 04:30:07  asst
    upload
<br>

*/

package asst.dbase;

import java.text.NumberFormat;

import java.util.Date;

import javax.servlet.http.HttpServletRequest;

import asst.time.MonthDayNames;

import asst.dbase.SelectorDatePreload;

/**
 *
 * @author money
 * @version %I%, %G%
 * @since
 *
 * @see <classname>
 */

public class SelectorDatetimePreload extends SelectorDatePreload {

  /** Obligatory constructor.*/
  public SelectorDatetimePreload() {
    super();
  }

  /** {@link asst.dbase.SelectorDatePreload#SelectorDatePreload(String name, String table, String column) SelectorDatePreload }
   */
  public SelectorDatetimePreload(String name, String table, String column) {
    super(name, table, column);
  }

  /** Read a set of selectors which set a date.
      @param name is the name of the set of selectors, various strings
      are added to the name to read the request.
      @param request the servlet request object from which values are
      extracted.*/
  public String ReadDateSelectors(String name, HttpServletRequest request,
				  boolean begins) {
    String answer;
    String yr;
    String mo;
    String da;
    int our;
    int min;
    int sec;
    /**/

    yr=request.getParameter(name+"_yR");
    mo=request.getParameter(name+"_mO");
    da=request.getParameter(name+"_dA");

    if ((yr == null) || ES.equals(yr) ||
	(mo == null) || ES.equals(mo) ||
	(da == null) || ES.equals(da)) { return null; } // Nothing set in form

    try {
      our = Integer.parseInt(request.getParameter(name+"_hR"));
      min = Integer.parseInt(request.getParameter(name+"_mN"));
      sec = Integer.parseInt(request.getParameter(name+"_sC"));
    } catch (Exception e) {
      if (begins ) {
	our = 0; min = 0; sec = 0;
      } else {
	our = 23; min = 59; sec = 59;
      }
    }

    if (our < 0 ) { our = 0; }
    if (our > 23) { our = 23; }
    if (min < 0 ) { min = 0; }
    if (min > 59) { min = 59; }
    if (sec < 0 ) { sec = 0; }
    if (sec > 59) { sec = 59; }

    answer = yr + "-" + mo + "-" + da + " " +
    LZERO_NUMBER.format(our) + ":" +
    LZERO_NUMBER.format(min) + ":" +
    LZERO_NUMBER.format(sec);

//      System.out.println(name + " " + yr + " " + mo + " " + da + " " +
//                     begins + " " + answer);

    return answer;
  }

  /** Return a set of selectors for the date.  Expects a string of the
      form yyyy-mm-dd hh:mm:ss as generated by {@link
      asst.dbase.SelectorFieldPreload#SQL_DATE_STRING}

      @param Yyyymmdd gives the current value of the selection.
      @param name is the .html field name to which are postpended identifiers.
      @return .html date selectors which suffice to select a day.*/
  public StringBuffer MakeDateSelectors(String Yyyymmdd, String name,
					int fY, int eY) {
    Date dat;
    String yr;
    int mo;
    int da;
    int yrInt;
    StringBuffer sb = new StringBuffer();
    int i;
    /**/

    try { yr = Yyyymmdd.substring(0, 4); } catch (Exception e) { yr = ES; }

    if ((fY == 0) && (eY == 0)) {
      // Generate year as a field
      sb.append("<input name=\"" + name + "_yR\" size=\"4\" value=\"" +
		yr + "\"");
      if (usePopUp) {
	sb.append(" onKeyPress='return justNums(event,this)' onKeyUp='checkYear(this)'");
      }
      sb.append(this.addParam + ">\n");
    } else {
      // Generate year as a selector
      yrInt = SQLUtilities.integerFromString(yr);
      sb.append("<SELECT NAME=\"" +  name + "_yR\"" + this.addParam + ">\n");
      if (yrInt == 0) {
	sb.append("<OPTION selected VALUE=\"\">Make A Selection</option>\n");
      } else {
	sb.append("<OPTION VALUE=\"\">Make A Selection</option>\n");
      }
      for (i=fY; i<=eY; i++) {
	sb.append("<OPTION VALUE=\"");
	sb.append(i + "\"");
	if (yrInt == i) { sb.append(" selected"); }
	sb.append(">" + i + "</option>\n");
      }
      sb.append("</select>\n");
    }
//Generate months as a selector
    sb.append("<SELECT NAME=\"" + name + "_mO\"" + this.addParam + ">\n");
    try {
      yr = Yyyymmdd.substring(5, 7);
      mo = Integer.parseInt(yr);
      if (--mo < 0) { mo = 0; }	// Array of names is zero-based
    } catch (Exception e) { mo = 0; }
    for (i = 0; i < MonthDayNames.MONTH_NAMES.length; i++) {
      sb.append("<OPTION VALUE=\"");
      if (i < 9) sb.append("0");
      sb.append((i+1) + "\"");
      if (mo == i) { sb.append(" selected"); }
      sb.append(">" + MonthDayNames.MONTH_NAMES[i] + "</option>\n");
    }
    sb.append("</select>\n");

    try {
      yr = Yyyymmdd.substring(8, 10);
      if ( (da = Integer.parseInt(yr)) < 1) { da = 1; }
    } catch (Exception e) { da = 1; }

    if (usePopUp) {
//Generate day/date as a text field
      sb.append("<input type=\"text\" size=\"2\" name=\"" + name +
		"_dA\" value=\"" + da + "\" onKeyPress='return justNums(event,this)' onKeyUp='checkDay(this)'" + this.addParam + ">\n");
    } else {
//Generate day/date as a selector
      sb.append("<SELECT NAME=\"" + name + "_dA\"" + this.addParam + ">\n");
      for (i = 1; i <=31; i++) {
	sb.append("<OPTION VALUE=\"");
	if (i <= 9) sb.append("0");
	sb.append( i + "\"");
	if (da == i) { sb.append(" selected"); }
	sb.append(">" + i + "</option>\n");
      }
      sb.append("</select>\n");
    }

    /* Now do the hours, minutes, and seconds */
//Hour
    try {
      yr = Yyyymmdd.substring(11, 13);
    } catch (Exception e) { yr = ES; }
    sb.append("<input type=\"text\" size=\"2\" name=\"" + name +
	      "_hR\" value=\"" + yr + "\"");
    if (usePopUp) {
      sb.append(" onKeyPress='return justNums(event,this)' onKeyUp='checkHour(this)'");
    }
    sb.append(this.addParam + ">\n");
//Minutes
    try {
      yr = Yyyymmdd.substring(14, 16);
    } catch (Exception e) { yr = ES; }
    sb.append(":<input type=\"text\" size=\"2\" name=\"" + name +
	      "_mN\" value=\"" + yr + "\"");
if (usePopUp) {
sb.append(" onKeyPress='return justNums(event,this)' onKeyUp='checkTime(this)'");
}
sb.append(">\n");
//Seconds
    try {
      yr = Yyyymmdd.substring(17, 19);
    } catch (Exception e) { yr = ES; }
    sb.append(":<input type=\"text\" size=\"2\" name=\"" + name +
	      "_sC\" value=\"" + yr + "\"");
    if (usePopUp) {
      sb.append(" onKeyPress='return justNums(event,this)' onKeyUp='checkTime(this)'");
    }
    sb.append(this.addParam + ">\n");

    if (usePopUp) {
      try {
	dat = SQL_DATE_STRING.parse(Yyyymmdd);
	yr = ES + dat.getTime();
      } catch (Exception e) { yr = ES; }

      sb.append("<a href=\"javascript:" + name +
		"_cal.popup(document." + formName + "." + name +
		"_mS);\">\n<img src=\"popcalimg/cal.gif\" width=\"16\" height=\"16\" border=\"0\" alt=\"Click here to set the date\"></a><input type=\"hidden\" name=\"" + name + "_mS\" value=\"" + yr + "\">\n");
      sb.append("<script language=\"JavaScript\">\nvar " + name +
		"_cal = new calendar2(document." + formName + "." + name +
		"_yR);\n" + name + "_cal.target2 = document." + formName +
		"." + name + "_mO;\n" + name + "_cal.target3 = document." +
		formName + "." + name + "_dA;\n" + name +
		"_cal.target4 = document." + formName + "." + name +
		"_hR;\n" + name + "_cal.target5 = document." + formName +
		"." + name + "_mN;\n" + name + "_cal.target6 = document." +
		formName + "." + name + "_sC;\n" + name +
		"_cal.year_scroll = true;\n" + name +
		"_cal.time_comp = true;\n</script>\n");
    }

    return sb;
  }

}
