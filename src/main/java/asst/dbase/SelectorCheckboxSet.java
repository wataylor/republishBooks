/* @name SelectorCheckboxSet.java

    Copyright (c) 2002 by Advanced Systems and Software Technologies.
    All Rights Reserved<br>

    Under revision by: $Locker:  $<br>
    Change Log:<br>
    $Log: SelectorCheckboxSet.java,v $
    Revision 1.4  2003/01/27 04:24:52  asst
    documentation

    Revision 1.3  2002/10/06 01:36:46  asst
    first upload

    Revision 1.2  2002/09/22 03:57:43  asst
    getHTMLOnly omits table heading

    Revision 1.1  2002/09/12 04:52:57  asst
    added RadioSet, CheckboxSet, RadioSetMember
<br>
*/

package asst.dbase;

import javax.servlet.http.HttpServletRequest;

import asst.dbase.SelectorFieldPreload;

/**
 * Implement a "Set" which is stored as a string and edited by some
 * number of checkboxes.  Each character of the string represents a
 * set member; a value of 'Y' indicates that the set contains the
 * member associated with that character of the string and any other
 * value indicates that it does not.  Any set member whose subscript
 * extends beyond the length of the string is considered to be absent
 * from the set.  A checkbox is associated with each set member, the
 * member is regarded as present in the set if the checkbox is
 * checked.</p>

 * <P>As defined, the set may include any combination of members.  It
 * is up to the caller to restrict the set to one member if that is
 * required.  In this case, however, it might be better to use radio
 * buttons which can be generated by

 {@link asst.dbase.SelectorRadioPreload SelectorRadioPreload}.</p>

 * <P>Human-readable strings which label the meanings of the characters
 * in the string and integer constants which select characters for
 * testing set membership are generally maintained in calling classes.</p>

 * <P>For example, a <CODE>fieldMgr</code> array which defines a
 * <CODE>SelectorCheckboxSet</code> which edits someone's permission set
 * might be declared thus:

<CODE><PRE>
SelectorCheckboxSet permCheck;
String[] checkSetSel = {"Open the Door",
		       "Edit Other Permissions", "Prefer sugar to honey"};
fieldMgrs = new SelectorManager[8];
i = 0;

...
fieldMgrs[i++] = (permCheck =
     new SelectorCheckboxSet("Checkbox_Permissions", jtbl, "PermsChck"));
...

permCheck.setSelections(checkSetSel);
permCheck.setIsInForm(true);
</pre></code>

Given these definitions, the .jsp code

<CODE>
&lt;TR&gt;&lt;TD align=center&gt;&lt;%=permCheckbox.getHTML()%&gt;&lt;/td&gt;&lt;/tr&gt;
</code>

produces the following .html given that the selected row has a value
of 'nYn' in column "PermsChck":</p>

<TABLE><TR><TH ALIGN="center">Checkbox Permissions</th></tr>
<TR><TD><input type="checkbox" name="Checkbox_Permissions0">
May Open the Door</td></tr>
<TR><TD><input type="checkbox" name="Checkbox_Permissions1" checked>
Edit Other Permissions</td></tr>
<TR><TD><input type="checkbox" name="Checkbox_Permissions2">
Prefer sugar to honey</td></tr>
</table>

<P><B>Unfortunately</b>, it is not possible to distinguish between a
checkbox which is in the form and is not checked and a checkbox which
is not in the form at all, both cases return a value of
<CODE>null</code>.  For this reason, it is necessary to record whether
the <CODE>CheckboxSet</code> is displayed in cases where the set may
or may not be displayed in an editor depending on user priviliges, see
{@link asst.dbase.SelectorFieldPreload#setIsInForm(boolean is)
setIsInForm}

<P>Radio buttons, in contrast, have a
value whenever they are present in the form and return <CODE>null</code>
only when not in the form at all.  Thus, if only part of a set may
appear in a particular form, it might be better to use

{@link asst.dbase.SelectorRadioSet} or
{@link asst.dbase.SelectorRadioSetMember}.</p>

 * @author money
 * @version %I%, %G%
 * @since
 *
 * @see asst.dbase.SelectorRadioPreload
 * @see asst.dbase.SelectorRadioSet
 */

public class SelectorCheckboxSet extends SelectorFieldPreload {

  /** Obligatory constructor.*/
  public SelectorCheckboxSet() {
  }

  /** Constructor that sets the selector name, database table, and
      database column.
      @param name from which the form field name is to be derived.when
      .html is generated
      @param table tells which SQL table is associated with the row of
      which this field stores and manipulates one column value.
      @param column names the database table column whose value is
      manipulated by this object.
  */
  public SelectorCheckboxSet(String name, String table, String column) {
    super(name, table, column);
  }

  /** Set the list of selections from a string array.
      @param selectionArray string array which has one label per
      checkbox.*/
  public void setSelections(String [] selectionArray) {
    this.selectionArray = selectionArray;
  }

  /** Get the current selection array.*/
  public String[] getSelections() {
    return this.selectionArray;
  }

  /** Express the selection checkboxes as a .html table with the
   * default width. */
  public StringBuffer getHTML() {
    return this.getHTMLAction(0, true);
  }

  /** Express the selection checkboxes as a .html table with the
   * specified table width.
   @param width if nonzero, sets the table width .html parameter. */
  public StringBuffer getHTML(int width) {
    return this.getHTMLAction(width, true);
  }

  /** Express the selection checkboxes as a .html table with the
   * specified width and with or without the table heading.
    @param width table width parameter, zero means it is omitted
    @param head if true, includes a table heading
    @return .html for the checkbox set.  */
  public StringBuffer getHTMLAction(int width, boolean head) {
    StringBuffer sb = new StringBuffer();
    int i;			// Count the members

    sb.append("<TABLE");
    if (width != 0) { sb.append(" width=\"" + width + "\""); }
    sb.append(this.addParam + ">");
    if (head) {
      sb.append("<TR><TH ALIGN=\"center\">" + this.getPrettyName() + "</th></tr>\n");
    }

    try {
      for (i=0; i<this.selectionArray.length; i++) {
	sb.append(this.getOneSelectionRow(i));
      }
    } catch (Exception e) {
      sb.append("<TR><TD>No selections</td></tr>");
    }
    sb.append("</table>\n");
    return sb;
  }

  /** Express selection checkboxes as a .html table with the
   * default width. */
  public StringBuffer getHTMLOnly() {
    return this.getHTMLAction(0, false);
  }

  /** Express the selection checkboxes as a .html table with the
   * specified width. */
  public StringBuffer getHTMLOnly(int width) {
    return this.getHTMLAction(width, false);
  }

  /** Express one set member as one .html checkbox structured as a
   * .html table row.*/
  public String getOneSelectionRow(int i) {
    return ("<TR><TD>" + this.getOneSelection(i) + "</td></tr>\n");
  }

  /** Express one set member as one named and labeled .html checkbox
   * without any table constructs.
   @param i selects which checkbox to generate
   @return string which expresses the checkbox in .html*/
  public String getOneSelection(int i) {
    String chk;			// Checked indication
    char ch;			// One character from the string
    String oneSel;
    /**/

    try {
      ch = this.getChoice().charAt(i);
    } catch (StringIndexOutOfBoundsException e) { ch = 'n'; }
    if (ch == 'Y') {
      chk = " checked";
    } else {
      chk = ES;
    }
    try {
      oneSel = "<input type=\"checkbox\" name=\"" +
	this.fieldNamePrefix + this.name + i +
	"\"" + chk + ">" + this.selectionArray[i];
    } catch (Exception e) { oneSel = "No selections"; }
    return oneSel;
  }

  /** Express one set member as one named stand-alone .html checkbox
   * without any table constructs or human-readable label.  The name
   * tells the form how to return the checkbox state.  Uses
   * <CODE>addParam</code> to modify the checkbox.</p>

   * <P> {@link #getOneSelection(int i) getOneSelection(i)} puts the
   * checkbox before the associated description.  This generates code
   * with the box after the selection for an object named
   * <CODE>cb</code>:

<PRE><CODE>
  htmlString = cb.getSelectionString(i) + cb.getYesNo(i)
</pre></code>

   @param i selects which checkbox to generate
   @return string which expresses the checkbox in .html*/
  public String getYesNo(int i) {
    String chk;			// Checked indication
    char ch;			// One character from the string
    String oneSel;
    /**/

    try {
      ch = this.getChoice().charAt(i);
    } catch (StringIndexOutOfBoundsException e) { ch = 'n'; }
    if (ch == 'Y') {
      chk = " checked";
    } else {
      chk = ES;
    }
    try {
      oneSel = "<input type=\"checkbox\" name=\"" +
	this.fieldNamePrefix + this.name + i +
	"\"" + chk + this.addParam + ">";
    } catch (Exception e) { oneSel = "No selections"; }
    return oneSel;
  }

  /** Ask the form to record the current form values for each of the
   * set members.  It does not matter whether the checkboxes are
   * written into the form as one group or separately so long as all
   * checkboxes use the same prefix.  A set member is set to "n" if
   * its field is not found in the form, thus, a form which displays
   * <B>ANY</b> of the set members must display them all.</p>

   * <P>If a set member is put into the same form more than once, it
   * is not clear which value wins.</p>

<P><B>Unfortunately</b>, it is not possible to distinguish between a
checkbox which is in the form and not checked and a checkbox which is
not in the form at all, both cases return a value of
<CODE>null</code>.  For this reason, it is necessary to record whether
the form is displayed in cases where the set may or may not be
displayed in an editor depending on user priviliges.  Thus, this
method does nothing unless <CODE>isInForm</code> is set.

   @param request from the form which may have parameters whose names
   matches the names of the checkboxes, in which case the new set value
   replaces the current choice.*/
  public void setChoice(HttpServletRequest request) {
    StringBuffer sb = new StringBuffer();
    int i;
    String prefix = this.fieldNamePrefix + this.name;
    char ch;			// One character from the string
    /**/

    if (!isInForm) return;	// Not displayed, do not record values.

    for (i=0; i<this.selectionArray.length; i++) {
      if (request.getParameter(prefix + i) != null) {
	sb.append("Y");
      } else {
	sb.append("n");
      }
    }
    this.setDirtyChoice(sb.toString());
  }

  /** Return the number of strings in the longest array.*/
  public int getSelectionStringCount() {
    return this.selectionArray.length;
  }

  /** Return one of the Before Yes strings.
      @param i indicates which string to return*/
  public String getSelectionString(int i) {
    return this.selectionArray[i];
  }

  /** Array of strings which label the checkboxes.*/
  protected String[] selectionArray;

}
