/* @name SelectorRadioSetMember.java

    Copyright (c) 2002 by Advanced Systems and Software Technologies.
    All Rights Reserved<br>

    Under revision by: $Locker:  $<br>
    Change Log:<br>
    $Log: SelectorRadioSetMember.java,v $
    Revision 1.2  2002/10/06 01:36:46  asst
    first upload

    Revision 1.1  2002/09/12 04:52:57  asst
    added RadioSet, CheckboxSet, RadioSetMember
<br>
*/

package asst.dbase;

import java.lang.ArrayIndexOutOfBoundsException;

import javax.servlet.http.HttpServletRequest;

import asst.dbase.SelectorFieldPreload;
import asst.dbase.StringSetUtils;

/**
 * Implement one member of a "Set" which is stored as a string.  Each
 * character of the string represents a set member; a value of 'Y'
 * indicates that the set contains the member associated with that
 * character of the string and any other value indicates that it does
 * not.  Any set member whose subscript extends beyond the length of
 * the string is considered to be absent from the set.  The set member
 * is associated with two radio buttons, one for 'Y' and one for
 * 'n'.</p>

 * <P>As defined, the set may include any combination of members.  It
 * is up to the caller to restrict the set to one member if that is
 * required.  In this case, however, it might be better to use radio
 * buttons as generated by

  {@link asst.dbase.SelectorRadioPreload} which allows only one member in
  the set.</p>

 * <P>A human-readable string which labels the meanings of the set
 * member may be specified if the field name is not descriptive
 * enough.</p>

 * <P>For example, a <CODE>fieldMgr</code> array which defines a
 * <CODE>SelectorRadioSetMember</code> which edits a set
 * might be declared thus:

<CODE><PRE>
SelectorRadioSetMember radioMember1;
SelectorRadioSetMember radioMember2;
SelectorRadioSetMember radioMember3;
SelectorFieldPreload holdsMemberSet;

String[] radioSetSel = {"You can open the door|or you can't|so there!",
		       "Edit Other Permissions", "Prefer sugar|to honey|"};

fieldMgrs = new SelectorManager[8];
i = 0;
...
fieldMgrs[i++] =
(holdsMemberSet = new SelectorFieldPreload("Holds_Set", jtbl, "MemberSet"));
...
i++;  // Create blank fieldManager array member
fieldMgrs[i++] =
(radioMember1 = new SelectorRadioSetMember("Likes_Butter", 1, holdsMemberSet));
fieldMgrs[i++] =
(radioMember2 = new SelectorRadioSetMember("radioMember2", 2, holdsMemberSet));
radioMember2.setSelections(radioSetSel);

fieldMgrs[i++] =
(radioMember3 = new SelectorRadioSetMember("Set Member 3", 3, holdsMemberSet));
radioMember3.setBeforeYesString("BY");
radioMember3.setAfterYesString("AY");
radioMember3.setBeforeNoString("BN");
radioMember3.setAfterNoString("AN");
...
</pre></code>

<B>Note:</b> The extra '|' character at the end of the 3rd string of
<CODE>radioSetSel</code> sets the <CODE>beforeNoString</code> to the
empty string which overrides the default value of "No."</p>

<P><B>Note:</b> <CODE>holdsMemberSet</code> must be instantiated before
any of the RadioSetMembers so that they can be passed a pointer to the
field whose choice string holds their set.  Since these set member
objects are never written to or from the database, they should be
defined AFTER the blank member of the fieldMgrs array; the extra i++
above creates a blank in the array.  <CODE>holdsMemberSet</code> is
how the set is written and read so it <B>must</b> appear <B>before</b>
the null member of the fieldMgrs array.</p>

<P>Given these definitions, the .jsp code

<CODE><PRE>
&lt;TR&gt;&lt;TD align=center&gt;&lt;%=radioMember1.getHTML()%&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;TR&gt;&lt;TD align=center&gt;&lt;%=radioMember2.getHTML()%&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;TR&gt;&lt;TD align=center&gt;&lt;%=radioMember3.getHTML()%&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;TR&gt;&lt;TD align=center&gt;&lt;%=holdsMemberSet.getPrettyName() +
   " " + holdsMemberSet.getChoiceAsText()%&gt;&lt;/td&gt;&lt;/tr&gt;
</pre></code>

produces the following .html given that the selected row has a value
of 'nYYY' in column "MemberSet":</p>

<TABLE>
<TR><TD align=center>Likes Butter
Yes <input type="radio" name="Likes_Butter1" value="Y" checked>
No <input type="radio" name="Likes_Butter1" value="n"></td></tr>
<TR><TD align=center>Prefer sugar
<input type="radio" name="radioMember22" value="Y" checked>to honey
<input type="radio" name="radioMember22" value="n"></td></tr>
<TR><TD align=center>
BY <input type="radio" name="Set_Member_33" value="Y" checked>
AYBN <input type="radio" name="Set_Member_33" value="n">AN</td></tr>
<TR><TD align=center>Holds Set nYYY</td></tr>
</table>

 * @author money
 * @version %I%, %G%
 * @since
 *
 * @see asst.dbase.SelectorRadioPreload
 * @see asst.dbase.SelectorCheckboxSet */

public class SelectorRadioSetMember extends SelectorFieldPreload {

  /** Obligatory constructor.*/
  public SelectorRadioSetMember() {
  }

  /** Constructor that sets the selector name, set member index, and
      the field which stores the set.
      @param name from which the form field name is derived.when .html
      is generated.  The name is also used as a label unless another
      label is suplied.  Spaces in the name are turned to underscores
      for compatibilty with Java Script.
      @param setField identifies a selector manager object which
      stores the set of which this object is a member.
      @param memberIndex selects the 'Y' or 'n' character in the set
      which stores this member.
  */
  public SelectorRadioSetMember(String name, int memberIndex,
				SelectorManager setField) {
    this.setName(name);
    this.setField = setField;
    this.memberIndex = memberIndex;
  }

  /** Set the selection string by choosing from a string array based on
      the <CODE>memberIndex</code> specified in the constructor.  The
      chosen string may be divided into up to 4 segments by '|'
      characters.  The .html is generated for each selection
      individually as follows:

      <UL>

      <LI>If there are no '|' characters in a particular string, the
      .html is generated as &lt;string&gt; &lt;yes radio button&gt; No
      &lt;no radio button&gt;</li>

      <LI>If there is one '|' character, the .html is generated as
      &lt;first string&gt; &lt;yes radio button&gt; &lt;second string&gt;
      &lt;no radio button&gt;</li>

      <LI>If there are two '|' characters, the .html is generated as
      &lt;first string&gt; &lt;yes radio button&gt; &lt;second string&gt;
      &lt;third string&gt; &lt;no radio button&gt; </li>

      <LI>If there are three '|' characters, the .html is generated as
      &lt;first string&gt; &lt;yes radio button&gt; &lt;second string&gt;
      &lt;third string&gt; &lt;no radio button&gt; &lt;fourth string&gt;</li>

      </ul>

      These strings may be ignored completely by generating

      {@link #getYes() stand-alone 'Y' button} or by
      {@link #getNo() stand-alone 'n' button}.

      <P>In this case, it is up to the caller to ensure that both the
      'Y' and the 'n' radio buttons are generated in a form and that
      they are generated only once each, incomplete or overlapping
      radio sets produce odd results.  The caller may retrieve the
      label strings and include them in the generated .html, see

      {@link #getSelectionString()}.

      @param work string to label one pair of radio buttons.*/
  public void setSelection(String work) {
    int ix;
    /**/

    if ( (ix = work.indexOf("|")) >= 0) {
      this.beforeYesString = work.substring(0, ix);
      work = work.substring(ix+1);
      if ( (ix = work.indexOf("|")) >= 0) {
	this.afterYesString = work.substring(0, ix);
	work = work.substring(ix+1);
	if ( (ix = work.indexOf("|")) >= 0) {
	  this.beforeNoString = work.substring(0, ix);
	  this.afterNoString  = work.substring(ix+1);
	} else {
	  this.beforeNoString = work;
	}
      } else {
	this.afterYesString = work;
      }
    } else {
      this.beforeYesString = work;
    }
  }

  /** Choose a selection string from an array of strings for the set
   and pass it to {@link #setSelection(String work) setSelection}
   @param selectionArray array of strings with one string per pair of
   radio buttons in the overall set.  Only the string selected by the
   set member number is saved in this object.*/
  public void setSelections(String [] selectionArray) {
    try {
      this.setSelection(selectionArray[this.memberIndex]);
    } catch (ArrayIndexOutOfBoundsException e) {
      this.setSelection(NO_SEL);
    }
  }

  /** Express the set member as a pair of .html radio buttons. */
  public StringBuffer getHTML() {
    return this.getHTML(0);
  }

  /** Express the set member as a pair of .html radio buttons. */
  public StringBuffer getHTML(int width) {
    return(this.getHTMLOnly(width));
  }

  /** Express the set member as a pair of .html radio buttons. */
  public StringBuffer getHTMLOnly() {
    return this.getHTMLOnly(0);
  }

  /** Express the set member as a pair of .html radio buttons. */
  public StringBuffer getHTMLOnly(int width) {
    StringBuffer sb = new StringBuffer();
    /**/

    try {
      sb.append(this.getOneSelection());
    } catch (Exception e) {
      sb.append(NO_SEL);
    }
    return sb;
  }

  /** Express one set member as one pair of .html radio buttons
   * structured as a .html table row.
   @param i is included for compatibility with {$line
   asst.dbase.SelectorRadioSet}, i is ignored because the object knows
   its member index*/
  public String getOneSelectionRow(int i) {
    return ("<TR><TD>" + this.getOneSelection() + "</td></tr>");
  }

  /** Express one set member as one pair of .html radio buttons
   * without any table constructs.  Uses addParam to modify each of
   * the radtio buttons.*/
  public String getOneSelection() {
    StringBuffer sb = new StringBuffer();
    /**/

    try {
 	if (this.beforeYesString!=null) { sb.append(this.beforeYesString); }
	sb.append(this.getYes());
	if (this.afterYesString!=null) { sb.append(this.afterYesString); }
	if (this.beforeNoString!=null) { sb.append(this.beforeNoString); }
	sb.append(this.getNo());
	if (this.afterNoString != null) { sb.append(this.afterNoString); }
    } catch (Exception e) { sb.append(NO_SEL); }
    return sb.toString();
  }

  /** Generate one stand-alone radio button.  It is up to the caller
   * to ensure that both halves of a pair of radio buttons appear
   * somewhere in the form.  Uses <CODE>addparam</code> to modify the
   * radio button.  One way to use this method to generate html which
   * resembles the .html generated by

   {@link #getOneSelection() rb.getOneSelection()}

   * for an object named <CODE>rb</code> might be:

   <PRE><CODE>
   htmlString = rb.getBeforeYesString() + rb.getYes() +
   rb.getAfterYesString() +
   rb.getBeforeNoString()  + rb.getNo() +
   rb.getAfterNoString();
   </pre></code>

   @param yes if true, generate the 'Y' radio button, otherwise
   generate the 'n' button
   @return string which defines the button.
  */
  public String getOneRadioButton(boolean yes) {
    String name = this.fieldNamePrefix + this.name + this.memberIndex;
    char ch;
    boolean in;
    StringBuffer sb = new StringBuffer();
    /**/

    try {
      ch = this.setField.getChoice().charAt(this.memberIndex);
    } catch (StringIndexOutOfBoundsException e) { ch = 'n'; }
    in = (ch == 'Y');

    sb.append("<input type=\"radio\" name=\"" + name +  "\" value=\"");
    if (yes) {
      sb.append("Y");
    } else {
      sb.append("n");
    }
    sb.append("\"");
    if (in == yes) { sb.append(" checked"); }
    sb.append(this.addParam + ">");
    return sb.toString();
  }

  /** Get the "Yes" half of a pair of radio buttons.  Uses
   * <CODE>addparam</code> to modify the radio button.  Examples of use
   * are given in the documentation of

   {@link #getOneRadioButton(boolean yes) getOneRadioButton}
   @return string that defines the radio button*/
  public String getYes() {
    return this.getOneRadioButton(true);
  }

  /** Get the "No" half of a pair of radio buttons.  Uses
   * <CODE>addparam</code> to modify the radio button.  Examples of use
   * are given in the documentation of

   {@link #getOneRadioButton(boolean yes) getOneRadioButton}
   @return string that defines the radio button*/
  public String getNo() {
    return this.getOneRadioButton(false);
  }

  /** Express the set member as one named pair of stand-alone Yes/No
   * .html radio buttons without any table constructs or
   * human-readable label.  The name tells the form how to return the
   * button pair state.  Uses <CODE>addParam</code> to modify the each of
   * the radio buttons.  This method is supplied for compatibility
   * with

   {@link asst.dbase.SelectorCheckboxSet#getYesNo(int i)
   SelectorCheckboxSet.getYesNo}

   * so that a given field can be changed from one to the other by
   * changing its type declaration without changing any code.  Uses
   * <CODE>addParam</code> to modify each of the pair of radio
   * buttons.
   @param i selects which pair of radio buttons to generate, this
   parameter is ignored because the object knows its set member
   number.
   @return string which expresses the two radio buttons in .html*/

  public String getYesNo(int i) {
    return this.getYesNo();
  }

   /** Express the set member as one named pair of stand-alone Yes/No
   * .html radio buttons without any table constructs or
   * human-readable label.  The name tells the form how to return the
   * button pair state.  Uses <CODE>addParam</code> to modify the each of
   * the radio buttons. */

  public String getYesNo() {
    String name = this.fieldNamePrefix + this.name + this.memberIndex;
    char ch;
    boolean in;
    StringBuffer sb = new StringBuffer();
    /**/

    try {
      ch = this.setField.getChoice().charAt(this.memberIndex);
    } catch (StringIndexOutOfBoundsException e) { ch = 'n'; }
    in = (ch == 'Y');

    sb.append(" Yes <input type=\"radio\" name=\"" + name +
	      "\" value=\"Y\"");
    if (in) sb.append(" checked");
    sb.append(this.addParam + "> No <input type=\"radio\" name=\"" + name +
	      "\" value=\"n\"");
    if (!in) sb.append(" checked");
    sb.append(this.addParam + ">");

    return sb.toString();
  }

  /** Ask the form to record the current form values for this
   * set member.  It does not matter whether the radio buttons are
   * written into the form as one group or separately so long as all
   * button pairs use the same prefix.</p>

   * <P>If a set member is put into the same form more than once, it
   * is not clear which value wins.
   @param request from the form which may have parameters whose names
   matches the names of the radio button pairs, in which case the new
   set member value replaces the current choice.*/
  public void setChoice(HttpServletRequest request) {
    String prefix = this.fieldNamePrefix + this.name;
    char ch;			// One character from the string
    String stg;
    /**/

    if ( (stg = request.getParameter(prefix + this.memberIndex)) != null) {
      stg = StringSetUtils.SetASetStringMember(this.setField.getChoice(),
					       this.memberIndex, stg);
      this.setField.setDirtyChoice(stg);
    }
  }

   /** Set the Before Yes string.
    @param set string to set.*/
  public void setSelectionString(String set) {
    this.beforeYesString = set;
  }

  /** Return the Before Yes string. */
  public String getSelectionString() {
    if (this.beforeYesString != null) {
      return this.beforeYesString;
    }
    return this.name;
  }

   /** set the Before Yes string.
    @param set string to set.*/
  public void setBeforeYesString(String set) {
    this.beforeYesString = set;
  }

 /** Return the Before Yes string. */
  public String getBeforeYesString() {
    if (this.beforeYesString != null) {
      return this.beforeYesString;
    }
    return this.name;
  }

   /** set the After Yes string.
    @param set string to set. */
  public void setAfterYesString(String set) {
    this.afterYesString = set;
  }

   /** Return the After Yes string. */
  public String getAfterYesString() {
    if (this.afterYesString != null) {
      return this.afterYesString;
    }
    return this.name;
  }

   /** set the Before No string.
    @param set string to set. */
  public void setBeforeNoString(String set) {
    this.beforeNoString = set;
  }

 /** Return the Before No string.  These strings are empty in cases
      where the main selection string has no '|' to split the
      string. */
  public String getBeforeNoString() {
    if (this.beforeNoString != null) {
      return this.beforeNoString;
    }
    return ES;
  }

   /** set the After No string.
    @param set string to set. */
  public void setAfterNoString(String set) {
    this.afterNoString = set;
  }

  /** Return the After No string.  These strings are empty in cases
      where the main selection string has fewer tha 2 '|' characters
      to split the string.*/
  public String getAfterNoString() {
    if (this.afterNoString != null) {
      return this.afterNoString;
    }
    return ES;
  }

  /** The choice is always the empty string for this object class.
      @return false*/
  public String getChoice() { return ES; }

  /** Signal not to use the table by returning <CODE>null</code>.
      @return false*/
  public String getTable() { return null; }

  /** Signal not to use the column by returning <CODE>null</code>.
      @return false*/
  public String getColumn() { return null; }

  /** Signal that it is not dirty
      @return false*/
  public boolean getDirtyFlag() { return false; }

  /** Signal that it is not unique
      @return false*/
  public boolean getUniqueFlag() { return false; }

  /** Signal that it is not logged
      @return false*/
  public boolean getIsLogged() { return false; }

  /** String which appears before the "Yes" radio button.
   * These strings are generated by the

   {@link #setSelection(String selection) setSelections}

   method as explained in its documentation. */
  protected String beforeYesString = "Yes";

  /** String which appears after the "Yes" radio button.
   * These strings are generated by the

   {@link #setSelection(String selection) setSelections}

   method as explained in its documentation. */
  protected String afterYesString = ES;

  /** Array of strings which appear before the "No" radio buttons.
   * These strings are generated by the

   {@link #setSelection(String selection) setSelections}

   method as explained in its documentation.*/
  protected String beforeNoString = "No";

  /** String which appears after the "No" radio buttons.
   * These strings are generated by the

   {@link #setSelection(String selection) setSelections}

   method as explained in its documentation.*/
  protected String afterNoString = ES;

  /** Index of the character within the set*/
  protected int memberIndex;

  /** Selector manager which stores the set*/
  protected SelectorManager setField;
}
