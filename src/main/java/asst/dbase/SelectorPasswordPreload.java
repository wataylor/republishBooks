/* @name SelectorPasswordPreload.java

    Copyright (c) 2002 by Advanced Systems and Software Technologies.
    All Rights Reserved<br>

    Under revision by: $Locker:  $<br>
    Change Log:<br>
    $Log: SelectorPasswordPreload.java,v $
    Revision 1.2  2002/10/06 01:36:46  asst
    first upload

    Revision 1.1  2002/09/08 02:57:01  asst
    Separated date and password classes
<br>

*/

package asst.dbase;

import java.util.Date;

import javax.servlet.http.HttpServletRequest;

import asst.dbase.SelectorFieldPreload;

/**
 * Selector field which is automatically formatted as a password.

 * @author money
 * @version %I%, %G%
 * @since
 *
 * @see <classname>
 */

public class SelectorPasswordPreload extends SelectorFieldPreload {

  /** Obligatory constructor.*/
  public SelectorPasswordPreload() {
  }

  /**
   * Constructor that sets the field name, database table name, and
   * database column.  The actual password is never put into the
   * form. This keeps others from reading it using "view soruce."

   * @param name The name by which the form field generated by getHTML
   * is identified; this name has NOTHING to do with the database.
   * This name is used when attempting to retrieve the current
   * user-entered value from the form.  This name should not contain
   * spaces if the fields are to be manipulated by JavaScript.  If
   * spaces are simulated by underscores, the method getPrettyName
   * should be used to retrieve a human-readable name from this field.

   * @param table The name of the database table in which the field is
   * generally stored.  This table is expected to be indexed by a
   * row number which is to be passed to TwixtTableAndForm.

   * @param column The name of the database column within the table
   * which stores the field value.  The column must store character
   * data.

  */
  public SelectorPasswordPreload(String name, String table, String column) {
    super(name, table, column);
  }

  /** Express the field value in a .html password area without
      labeling it and using a specified width.  Passwords are always
      displayed as blank to protect the password from being read by
      others using "view source."  Thus, if someone forgets a
      password, it is necessary to edit their data and define a new
      one.
  @param width specifies how wide to make the password checkbox.*/
  public StringBuffer getHTMLOnly(int width) {
    StringBuffer sb;
    String cho = ES;
    String choiceS = ES;
    /**/

    if (this.choice != null) {
      cho = this.choice;
      while (cho.length() > choiceS.length()) { choiceS += "*"; }
    }

    sb = new StringBuffer("<input type = \"password\" name=\"" +
			  this.fieldNamePrefix + this.name +
			  "\" value=\"" + choiceS + "\"");
    if (width > 0) {
      sb.append(" width=\"" + width + "\"");
    }

    sb.append(this.addParam + " onFocus='this.select()'>");
    return sb;
  }

  /** Ask the form to record the current form value which has been
      entered for its field.  If the form returns a null value, the
      field was not mentioned in the form so the form has no effect on
      this selector object.  In the case of a password field, a field
      which contains only asterisks is discarded.  This is because the
      password object sets the field to contain nothing but asterisks
      so that the actual password is not visible using "View Source."
  @param request from the form which may have a parameter whose name
  matches the name of this object, in which case the parameter value
  replaces the current choice.*/
  public void setChoice(HttpServletRequest request) {
    String aParam;
    int i;
    int j = 0;
    /**/

    aParam = request.getParameter(this.fieldNamePrefix + this.name);
    if ((aParam != null) && !ES.equals(aParam)) {
      for (i=0; i<aParam.length(); i++) {
	if (aParam.charAt(i) != '*') {
	  j++;			// non-asterisks
	  break;
	}
      }
      if (j > 0) {
	this.setDirtyChoice(aParam);
      }
    }
  }

  /** Validate a password field.  Valid password fields may not
   * contain asterisks because they are regarded as special characters
   * in so many applications.
   @return true if the password is OK, false otherwise.*/
  public boolean getIsValid() {
    String cho = this.getChoice();
    /**/

    if (cho.length() <= 0) return false; // Zero length password is NG.

    for (int i=0; i<cho.length(); i++) {
      if (cho.charAt(i) == '*') { return false; }
    }
    return true; 		//  it is OK
  }
}
