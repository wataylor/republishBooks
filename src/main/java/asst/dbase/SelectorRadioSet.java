/* @name SelectorRadioSet.java

    Copyright (c) 2002 by Advanced Systems and Software Technologies.
    All Rights Reserved<br>

    Under revision by: $Locker:  $<br>
    Change Log:<br>
    $Log: SelectorRadioSet.java,v $
    Revision 1.2  2002/10/06 01:36:46  asst
    first upload

    Revision 1.1  2002/09/12 04:52:57  asst
    added RadioSet, CheckboxSet, RadioSetMember
<br>
*/

package asst.dbase;

import javax.servlet.http.HttpServletRequest;

import asst.dbase.SelectorFieldPreload;

/**
 * Implement a "Set" which is stored as a string and edited by some
 * number of radio buttons.  Each character of the string represents a
 * set member; a value of 'Y' indicates that the set contains the
 * member associated with that character of the string and any other
 * value indicates that it does not.  Any set member whose subscript
 * extends beyond the length of the string is considered to be absent
 * from the set.  When the set is displayed, each member is associated
 * with two radio buttons, one for 'Y' and one for 'n'.</p>

 * <P>As defined, the set may include any combination of members.  It
 * is up to the caller to restrict the set to one member if that is
 * required.  In this case, however, it might be better to use radio
 * buttons which can be generated by

  {@link asst.dbase.SelectorRadioPreload}.</p>

 * <P>Human-readable strings which label the meanings of the characters
 * in the string and integer constants which select characters for
 * testing set membership are generally maintained in calling classes.</p>

 * <P>For example, a <CODE>fieldMgr</code> array which defines a
 * <CODE>SelectorRadioSet</code> which edits someone's permission set
 * might be declared thus:

<CODE><PRE>
SelectorRadioSet permRadio;
String[] radioSetSel = {"You can open the door|or you can't|so there!",
		       "Edit Other Permissions", "Prefer sugar|to honey"};
fieldMgrs = new SelectorManager[8];
i = 0;

...
fieldMgrs[i++] = (permRadio =
     new SelectorRadioSet("Radio_Permissions", jtbl, "PermsRdio"));
...

permRadio.setSelections(radioSetSel);
</pre></code>

Given these definitions, the .jsp code

<CODE>
&lt;TR&gt;&lt;TD align=center&gt;&lt;%=permRadio.getHTML()%&gt;&lt;/td&gt;&lt;/tr&gt;
</code>

produces the following .html given that the selected row has a value
of 'YnY' in column "PermsRdio":</p>

<TABLE>
<TR><TH ALIGN="center">Radio Permissions</th></tr>
<TR><TD>You can open the door
<input type="radio" name="Radio_Permissions0" value="Y" checked>
or you can't
<input type="radio" name="Radio_Permissions0" value="n">
so there!</td></tr>
<TR><TD>Edit Other Permissions Yes
<input type="radio" name="Radio_Permissions1" value="Y"> No
<input type="radio" name="Radio_Permissions1" value="n" checked></td></tr>
<TR><TD>Prefer sugar
<input type="radio" name="Radio_Permissions2" value="Y" checked>
to honey
<input type="radio" name="Radio_Permissions2" value="n"></td></tr>
</table>

 * @author money
 * @version %I%, %G%
 * @since
 *
 * @see asst.dbase.SelectorRadioPreload
 * @see asst.dbase.SelectorCheckboxSet */

public class SelectorRadioSet extends SelectorFieldPreload {

  /** Obligatory constructor.*/
  public SelectorRadioSet() {
  }

  /** Constructor that sets the selector name, database table, and
      database column which stores the set.
      @param name from which the form field name is to be derived.when
      .html is generated
      @param table tells which SQL table is associated wtih the row of
      which this field stores and manipulates one column value.
      @param column names the database table column whose value is
      manipulated by this object.
  */
  public SelectorRadioSet(String name, String table, String column) {
    super(name, table, column);
  }

  /** Set the list of selections from a string array.  Each string may
      be divided into up to 3 segments by '|' characters.  The .html
      is generated for each selection individually as follows:

      <UL>

      <LI>If there are no '|' characters in a particular string, the
      .html is generated as &lt;string&gt; Y &lt;yes radio button&gt; N
      &lt;no radio button&gt;</li>

      <LI>If there is one '|' character, the .html is generated as
      &lt;first string&gt; &lt;yes radio button&gt; &lt;second string&gt;
      &lt;no radio button&gt;</li>

      <LI>If there are two '|' characters, the .html is generated as
      &lt;first string&gt; &lt;yes radio button&gt; &lt;second string&gt;
      &lt;no radio button&gt; &lt;third string&gt;</li>

      </ul>

      These strings may be ignored completely by generating

      {@link #getYes(int i) stand-alone 'Y' button} or by
      {@link #getNo(int i) stand-alone 'n' button}.

      <P>In this case, it is up to the caller to ensure that both the 'Y'
      and the 'n' radio buttons are generated in a form and that they
      are generated only once each, incomplete or overlapping radio
      sets produce odd results.  The caller may retrieve strings from
      these arrays, however, and include them in the generated .html,
      see

      {@link #getSelectionStringCount} and {@link #getSelectionString(int i)}.

      @param selectionArray string array which has one label per
      pair of radio buttons.*/
  public void setSelections(String [] selectionArray) {
    String work;
    String work2;
    int ix;
    int i;
    /**/

    this.selectionArray = new String[selectionArray.length];
    this.beforeNoArray  = new String[selectionArray.length];
    this.afterNoArray   = new String[selectionArray.length];

    for (i=0; i<selectionArray.length; i++) {
      work = selectionArray[i];
      if ( (ix = work.indexOf("|")) > 0) {
	this.selectionArray[i] = work.substring(0, ix);
	work = work.substring(ix+1);
	if ( (ix = work.indexOf("|")) > 0) {
	  this.afterNoArray[i] = work.substring(ix+1);
	  work = work.substring(0, ix);
	}
	this.beforeNoArray[i] = work;
      } else {
	this.selectionArray[i] = work;
      }
    }
  }

  /** Express the selection radio buttons as a .html table with the
   * default width, uses <CODE>addParam</code> to modify the table. */
  public StringBuffer getHTML() {
    return this.getHTML(0);
  }

  /** Express the selection radio buttons as a .html table with the
   * specified width, uses <CODE>addParam</code> to modify the table. */
  public StringBuffer getHTML(int width) {
    StringBuffer sb = new StringBuffer();
    int i;			// Count the members

    sb.append("<TABLE");
    if (width != 0) { sb.append(" width=\"" + width + "\""); }
    sb.append(this.addParam + ">");
    sb.append("<TR><TH ALIGN=\"center\">" + this.getPrettyName() + "</th></tr>\n");

    try {
      for (i=0; i<this.selectionArray.length; i++) {
	sb.append(this.getOneSelectionRow(i));
      }
    } catch (Exception e) {
      sb.append("<TR><TD>No selections</td></tr>");
    }
    sb.append("</table>\n");
    return sb;
  }

  /** Express selection radio buttons as a .html table with the
   * default width, uses <CODE>addParam</code> to modify the table. */
  public StringBuffer getHTMLOnly() {
    return this.getHTML(0);
  }

  /** Express the selection buttons as a .html table with the
   * specified width, uses <CODE>addParam</code> to modify the table. */
  public StringBuffer getHTMLOnly(int width) {
    return this.getHTML(width);
  }

  /** Express one set member as one pair of .html radio buttons
   * structured as a .html table row.*/
  public String getOneSelectionRow(int i) {
    return ("<TR><TD>" + this.getOneSelection(i) + "</td></tr>\n");
  }

  /** Express one set member as one set of .html radio buttons without
   * any table constructs.*/
  public String getOneSelection(int i) {
    char ch;
    boolean in;
    StringBuffer sb = new StringBuffer();
    String name = this.fieldNamePrefix + this.name + i;
    /**/

    try {
      ch = this.getChoice().charAt(i);
    } catch (StringIndexOutOfBoundsException e) { ch = 'n'; }
    in = (ch == 'Y');

    try {
      if ((this.beforeNoArray[i] == null) && (this.afterNoArray[i] == null)) {
	sb.append(this.selectionArray[i] +
		  " Yes <input type=\"radio\" name=\"" + name +
		  "\" value=\"Y\"");
	if (in) sb.append(" checked");
	sb.append("> No <input type=\"radio\" name=\"" + name +
		  "\" value=\"n\"");
	if (!in) sb.append(" checked");
	sb.append(">");
      } else {
	sb.append(this.selectionArray[i] + " <input type=\"radio\" name=\"" +
		  name +  "\" value=\"Y\"");
	if (in) sb.append(" checked");
	sb.append(">");
	if (this.beforeNoArray[i]!=null) { sb.append(this.beforeNoArray[i]); }
	sb.append("<input type=\"radio\" name=\"" + name +  "\" value=\"n\"");
	if (!in) sb.append(" checked");
	sb.append(">");
	if (this.afterNoArray[i] != null) { sb.append(this.afterNoArray[i]); }
      }
    } catch (Exception e) { sb.append("No selections"); }
    return sb.toString();
  }

  /** Generate one stand-alone radio button.  It is up to the caller
   * to ensure that both halves of a pair of radio buttons appear
   * somewhere in the form.  Uses <CODE>addparam</code> to modify the
   * radio button.  One way to use this method to generate html which
   * resembles the .html generated by

   {@link #getOneSelection(int i) rb.getOneSelection(i)}

   * for an object named <CODE>rb</code> might be:

<PRE><CODE>
  htmlString = rb.getSelectionString(i) + rb.getYes(i) +
               rb.getBeforeNoString(i)  + rb.getNo(i) +
               rb.getAfterNoString(i);
</pre></code>

   @param i selects one of the radio button pairs in the same way that
   a labeling string would be selected from the selections array.
   @param yes if true, generate the 'Y' radio button, otherwise
   generate the 'n' button
   @return string which defines the button.
   */
  public String getOneRadioButton(int i, boolean yes) {
    String name = this.fieldNamePrefix + this.name + i;
    char ch;
    boolean in;
    StringBuffer sb = new StringBuffer();
    /**/

    try {
      ch = this.getChoice().charAt(i);
    } catch (StringIndexOutOfBoundsException e) { ch = 'n'; }
    in = (ch == 'Y');

    sb.append("<input type=\"radio\" name=\"" + name +  "\" value=\"");
    if (yes) {
      sb.append("Y");
    } else {
      sb.append("n");
    }
    sb.append("\"");
    if (in == yes) { sb.append(" checked"); }
    sb.append(this.addParam + ">");
    return sb.toString();
  }

  /** Get the "Yes" half of a pair of radio buttons.  Uses
   * <CODE>addparam</code> to modify the radio button.  Examples of use
   * are given in the documentation of

   {@link #getOneRadioButton(int i, boolean yes) getOneRadioButton}
   @param i selects one of the radio button pairs in the same way that
   a labeling string would be selected from the selections array.
  @return string that defines the radio button*/
  public String getYes(int i) {
    return this.getOneRadioButton(i, true);
  }

   /** Get the "No" half of a pair of radio buttons.  Uses
   * <CODE>addparam</code> to modify the radio button.  Examples of use
   * are given in the documentation of

   {@link #getOneRadioButton(int i, boolean yes) getOneRadioButton}
   @param i selects one of the radio button pairs in the same way that
   a labeling string would be selected from the selections array.
  @return string that defines the radio button*/
  public String getNo(int i) {
    return this.getOneRadioButton(i, false);
  }

  /** Express one set member as one named pair of stand-alone Yes/No
   * .html radio buttons without any table constructs or
   * human-readable label.  The name tells the form how to return the
   * button pair state.  Uses <CODE>addParam</code> to modify the each of
   * the radio buttons.  This method is supplied for compatibility
   * with

   {@link asst.dbase.SelectorCheckboxSet#getYesNo(int i)
   SelectorCheckboxSet.getYesNo}

   * so that a given field can be changed from one to the other by
   * changing its type declaration without changing any code.  Uses
   * <CODE>addParam</code> to modify each of the pair of radio
   * buttons.
   @param i selects which pair of radio buttons to generate
  @return string which expresses the two radio buttons in .html*/

  public String getYesNo(int i) {
    String name = this.fieldNamePrefix + this.name + i;
    char ch;
    boolean in;
    StringBuffer sb = new StringBuffer();
    /**/

    try {
      ch = this.getChoice().charAt(i);
    } catch (StringIndexOutOfBoundsException e) { ch = 'n'; }
    in = (ch == 'Y');

    sb.append(" Yes <input type=\"radio\" name=\"" + name +
	      "\" value=\"Y\"");
    if (in) sb.append(" checked");
    sb.append(this.addParam + "> No <input type=\"radio\" name=\"" + name +
	      "\" value=\"n\"");
    if (!in) sb.append(" checked");
    sb.append(this.addParam + ">");

    return sb.toString();
  }

  /** Ask the form to record the current form values for each of the
   * set members.  It does not matter whether the radio buttons are
   * written into the form as one group or separately so long as all
   * button pairs use the same prefix.</p>

   * <P>If a set member is put into the same form more than once, it
   * is not clear which value wins.
   @param request from the form which may have parameters whose names
   matches the names of the radio button pairs, in which case the new
   set value replaces the current choice.*/
  public void setChoice(HttpServletRequest request) {
    StringBuffer sb = new StringBuffer();
    int i;
    String prefix = this.fieldNamePrefix + this.name;
    char ch;			// One character from the string
    String stg;
    /**/

    for (i=0; i<this.selectionArray.length; i++) {
      if ( (stg = request.getParameter(prefix + i)) != null) {
	sb.append(stg);
      } else {
	try {
	  ch = this.getChoice().charAt(i);
	} catch (StringIndexOutOfBoundsException e) {
	  ch = 'n';
	}
	sb.append(ch);
      }
    }
    this.setDirtyChoice(sb.toString());
  }

  /** Return the number of strings in the longest array.*/
  public int getSelectionStringCount() {
    return this.selectionArray.length;
  }

  /** Return one of the Before Yes strings.
      @param i indicates which string to return*/
  public String getSelectionString(int i) {
    return this.selectionArray[i];
  }

  /** Return one of the Before No strings.  These strings are
      <CODE>null</code> in cases where the main selection string has
      no '|' to split the string.
      @param i indicates which string to return*/
  public String getBeforeNoString(int i) {
    return this.beforeNoArray[i];
  }

  /** Return one of the After No strings.  These strings are
      <CODE>null</code> in cases where the main selection string has
      fewer tha 2 '|' characters to split the string.
      @param i indicates which string to return*/
  public String getAfterNoString(int i) {
    return this.afterNoArray[i];
  }

  /** Array of strings which appear before the "Yes" radio buttons.
   * These strings are generated by the

  {@link #setSelections(String[] selectionArray) setSelections}

method as explained in its documentation. */
  protected String[] selectionArray;

  /** Array of strings which appear before the "No" radio buttons.
   * These strings are generated by the

  {@link #setSelections(String[] selectionArray) setSelections}

method as explained in its documentation.*/
  protected String[] beforeNoArray;

  /** Array of strings which appear after the "No" radio buttons.
   * These strings are generated by the

  {@link #setSelections(String[] selectionArray) setSelections}

method as explained in its documentation.*/
  protected String[] afterNoArray;

}
